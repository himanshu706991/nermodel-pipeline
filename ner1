documents:




$$$$$$$$$$$$$$$4
import pandas as pd
import torch
import numpy as np
from transformers import BertTokenizerFast, BertForTokenClassification
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# ðŸ”¹ Load Trained Model and Tokenizer
model_name = "C:/data/ner_model"
tokenizer = BertTokenizerFast.from_pretrained(model_name)
model = BertForTokenClassification.from_pretrained(model_name)
model.eval()  # Set model to evaluation mode

# ðŸ”¹ Load Test Data
df_test = pd.read_csv("C:/data/test_tokens.csv")  # Sentence_ID, Token, Actual_Tag

# ðŸ”¹ Ensure Tokens Are Strings
df_test["token"] = df_test["token"].astype(str)

# ðŸ”¹ Group Tokens by Sentence
sentences = df_test.groupby("sentence_id")["token"].apply(list).tolist()
actual_labels = df_test.groupby("sentence_id")["actual_tag"].apply(list).tolist()

# ðŸ”¹ Label Mappings
unique_labels = sorted(df_test["actual_tag"].dropna().unique())
label2id = {label: i for i, label in enumerate(unique_labels)}
id2label = {i: label for label, i in label2id.items()}

# ðŸ”¹ Prediction Function
def predict_ner(sentences):
    predictions_list = []

    for sentence in sentences:
        inputs = tokenizer(sentence, is_split_into_words=True, return_tensors="pt", truncation=True, padding=True)
        with torch.no_grad():
            outputs = model(**inputs)

        predictions = torch.argmax(outputs.logits, dim=2)[0].tolist()
        predicted_labels = [id2label.get(p, "O") for p in predictions[:len(sentence)]]

        predictions_list.append(predicted_labels)
    
    return predictions_list

# ðŸ”¹ Get Predictions
predicted_labels = predict_ner(sentences)

# ðŸ”¹ Create New File with Tokens, Predicted, and Actual Tags
final_df = pd.DataFrame({
    "Token": [token for sent in sentences for token in sent],
    "Actual_Tag": [tag for sent in actual_labels for tag in sent],
    "Predicted_Tag": [tag for sent in predicted_labels for tag in sent]
})

# ðŸ”¹ Save Final Predictions
final_df.to_csv("C:/data/final_predictions.csv", index=False)
print("âœ… Final predictions saved to 'C:/data/final_predictions.csv'")

# ðŸ”¹ Compute Confusion Matrix
actual_labels_flat = final_df["Actual_Tag"].tolist()
predicted_labels_flat = final_df["Predicted_Tag"].tolist()

conf_matrix = confusion_matrix(actual_labels_flat, predicted_labels_flat, labels=unique_labels)

# ðŸ”¹ Plot Confusion Matrix
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=unique_labels, yticklabels=unique_labels)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("NER Confusion Matrix")
plt.show()

# ðŸ”¹ Print Classification Report
print("NER Model Performance:")
print(classification_report(actual_labels_flat, predicted_labels_flat))

$$$$$$
Train
import pandas as pd
import torch
from torch.utils.data import Dataset
from transformers import BertTokenizerFast, BertForTokenClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split

# ðŸ”¹ Load Data
sentences_df = pd.read_csv("C:/data/sentences.csv")  # Sentence descriptions
tokens_df = pd.read_csv("C:/data/tokens.csv")  # Token-level annotations

# ðŸ”¹ Merge sentences with tokens using sentence_id
merged_df = tokens_df.merge(sentences_df, on="sentence_id", how="left")
merged_df["tag"] = merged_df["tag"].fillna("O")  # Fill missing labels as 'O' (no entity)

# ðŸ”¹ Group tokens & labels by sentence
sentences = merged_df.groupby("sentence_id")["token"].apply(list).tolist()
labels = merged_df.groupby("sentence_id")["tag"].apply(list).tolist()

# ðŸ”¹ Train-Test Split
train_sentences, test_sentences, train_labels, test_labels = train_test_split(sentences, labels, test_size=0.2, random_state=42)

# ðŸ”¹ Load Tokenizer
model_name = "bert-base-uncased"
tokenizer = BertTokenizerFast.from_pretrained(model_name)

# ðŸ”¹ Convert Labels to Numerical Format
unique_labels = sorted(set(merged_df["tag"].dropna().unique()))
label2id = {label: i for i, label in enumerate(["O"] + unique_labels)}
id2label = {i: label for label, i in label2id.items()}

# ðŸ”¹ Tokenization Function
def tokenize_and_align_labels(sentences, labels):
    tokenized_inputs = tokenizer(
        sentences, 
        is_split_into_words=True,
        truncation=True,
        padding=True,
        return_tensors="pt"
    )

    aligned_labels = []
    for i, sentence_labels in enumerate(labels):
        word_ids = tokenized_inputs.word_ids(batch_index=i)
        previous_word_idx = None
        label_ids = []

        for word_idx in word_ids:
            if word_idx is None:
                label_ids.append(-100)  # Ignore special tokens
            elif word_idx != previous_word_idx:
                label_ids.append(label2id.get(sentence_labels[word_idx], 0))
            else:
                label_ids.append(-100)  # Ignore subwords

            previous_word_idx = word_idx

        aligned_labels.append(label_ids)

    tokenized_inputs["labels"] = torch.tensor(aligned_labels)
    return tokenized_inputs

# ðŸ”¹ Tokenize Train & Test Data
train_encodings = tokenize_and_align_labels(train_sentences, train_labels)
test_encodings = tokenize_and_align_labels(test_sentences, test_labels)

# ðŸ”¹ Dataset Class
class NERDataset(Dataset):
    def __init__(self, encodings):
        self.encodings = encodings

    def __len__(self):
        return len(self.encodings["input_ids"])

    def __getitem__(self, idx):
        return {key: val[idx] for key, val in self.encodings.items()}

train_dataset = NERDataset(train_encodings)
test_dataset = NERDataset(test_encodings)

# ðŸ”¹ Load Model
model = BertForTokenClassification.from_pretrained(model_name, num_labels=len(label2id))

# ðŸ”¹ Training Arguments
training_args = TrainingArguments(
    output_dir="./ner_model",
    evaluation_strategy="epoch",
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir="./logs",
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
)

# ðŸ”¹ Train Model
trainer.train()

# ðŸ”¹ Save Trained Model
model.save_pretrained("C:/data/ner_model")
tokenizer.save_pretrained("C:/data/ner_model")

print("âœ… NER Model Training Completed!")





$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$import pandas as pd
import torch
from torch.utils.data import Dataset, DataLoader
from transformers import BertTokenizerFast, BertForTokenClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
import numpy as np

# ðŸ”¹ Load Data
sentences_df = pd.read_csv("C:/data/sentences.csv")  # Sentence descriptions
tokens_df = pd.read_csv("C:/data/tokens.csv")  # Token-level annotations

# ðŸ”¹ Merge sentences with tokens using sentence_id
merged_df = tokens_df.merge(sentences_df, on="sentence_id", how="left")

# ðŸ”¹ Load Tokenizer
model_name = "bert-base-uncased"
tokenizer = BertTokenizerFast.from_pretrained(model_name)

# ðŸ”¹ Prepare Data
sentence_grouped = merged_df.groupby("sentence_id")
data = []
for _, group in sentence_grouped:
    tokens = group["token"].astype(str).tolist()
    labels = group["tag"].fillna("O").tolist()  # Fill missing labels as 'O'
    data.append((tokens, labels))

# ðŸ”¹ Convert Labels to Numerical Format
unique_labels = list(set(merged_df["tag"].dropna().unique()))
label2id = {label: i for i, label in enumerate(["O"] + unique_labels)}  # 'O' for non-entities
id2label = {i: label for label, i in label2id.items()}

class NERDataset(Dataset):
    def __init__(self, data, tokenizer, label2id, max_len=128):
        self.data = data
        self.tokenizer = tokenizer
        self.label2id = label2id
        self.max_len = max_len

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        tokens, labels = self.data[idx]
        encoding = self.tokenizer(tokens, is_split_into_words=True, truncation=True, padding="max_length", max_length=self.max_len, return_tensors="pt")
        
        word_ids = encoding.word_ids()
        label_ids = []
        previous_word_idx = None
        for word_idx in word_ids:
            if word_idx is None:
                label_ids.append(-100)  # Ignore padding tokens
            elif word_idx != previous_word_idx:
                label_ids.append(self.label2id.get(labels[word_idx], 0))  # Assign label or 'O'
            else:
                label_ids.append(-100)  # Ignore subwords
            previous_word_idx = word_idx

        encoding["labels"] = torch.tensor(label_ids)
        return {key: val.squeeze(0) for key, val in encoding.items()}

# ðŸ”¹ Split Data
data_train, data_test = train_test_split(data, test_size=0.2, random_state=42)

train_dataset = NERDataset(data_train, tokenizer, label2id)
test_dataset = NERDataset(data_test, tokenizer, label2id)

# ðŸ”¹ Load Model for Token Classification
model = BertForTokenClassification.from_pretrained(model_name, num_labels=len(label2id))

# ðŸ”¹ Training Arguments
training_args = TrainingArguments(
    output_dir="./ner_model",
    evaluation_strategy="epoch",
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir="./logs",
    save_strategy="epoch",
    load_best_model_at_end=True,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    tokenizer=tokenizer,
)

# ðŸ”¹ Train Model
trainer.train()

# ðŸ”¹ Save Trained Model
model.save_pretrained("C:/data/ner_model")
tokenizer.save_pretrained("C:/data/ner_model")

print("âœ… NER Model Training Completed!")
